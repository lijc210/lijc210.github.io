import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o as a,d as e}from"./app-Brnn0awU.js";const i={},l=e(`<h1 id="clickhouse" tabindex="-1"><a class="header-anchor" href="#clickhouse"><span>clickhouse</span></a></h1><h2 id="clickhouse-常用命令" tabindex="-1"><a class="header-anchor" href="#clickhouse-常用命令"><span>clickhouse 常用命令</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>更新数据</span></span>
<span class="line"><span>ALTER table ads_sales_item_shop_di_replica ON CLUSTER ck_cluster1 update item_no=&#39;&#39; where item_no is null;</span></span>
<span class="line"><span>ALTER table ads_sales_item_shop_di_replica ON CLUSTER ck_cluster1 update store_shop_code=&#39;&#39; where store_shop_code is null;</span></span>
<span class="line"><span>ALTER table ads_sales_item_shop_di_replica ON CLUSTER ck_cluster1 update unify_goods_code=&#39;&#39; where unify_goods_code is null;</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>重命名表</span></span>
<span class="line"><span>RENAME TABLE table_A TO table_A_bak, table_B TO table_B_bak;</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>查看所有表</span></span>
<span class="line"><span>select *</span></span>
<span class="line"><span>FROM system.tables t WHERE database =&#39;ads&#39; AND engine &lt;&gt;&#39;Distributed&#39; ORDER by total_rows DESC </span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>select *</span></span>
<span class="line"><span>FROM system.tables t WHERE database =&#39;ads&#39;</span></span>
<span class="line"><span>AND engine &lt;&gt;&#39;Distributed&#39;</span></span>
<span class="line"><span>and name not like &#39;%del%&#39;</span></span>
<span class="line"><span>and name not like &#39;%20%&#39;</span></span>
<span class="line"><span>ORDER by total_rows DESC</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>自动清理query_log，query_thread_log，trace_log</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ALTER TABLE system.query_log on cluster ck_cluster1 MODIFY TTL event_date + INTERVAL 15 DAY</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ALTER TABLE system.query_thread_log on cluster ck_cluster1 MODIFY TTL event_date + INTERVAL 15 DAY</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ALTER TABLE system.trace_log on cluster ck_cluster1 MODIFY TTL event_date + INTERVAL 15 DAY</span></span>
<span class="line"><span></span></span>
<span class="line"><span>立即清理</span></span>
<span class="line"><span>alter table system.query_thread_log_0 drop partition &#39;202105&#39;</span></span>
<span class="line"><span>分区名可以用下语句查询</span></span>
<span class="line"><span>select * from system.parts p where table = &#39;表名&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>查看parts  </span></span>
<span class="line"><span>select * from system.parts  where table = &#39;abs_activity_item_info_day_replica&#39;</span></span>
<span class="line"><span>select * from system.parts where active = 0</span></span>
<span class="line"><span>当前慢查询</span></span>
<span class="line"><span>SELECT * FROM system.processes limit 100</span></span>
<span class="line"><span></span></span>
<span class="line"><span>耗时大于60秒</span></span>
<span class="line"><span>kill query where elapsed &gt;= 60</span></span>
<span class="line"><span></span></span>
<span class="line"><span>clickhouse不能创建等执行操作时（每个节点都要执行）</span></span>
<span class="line"><span>select * from system.mutations where is_done = 0;</span></span>
<span class="line"><span>kill mutation ON CLUSTER ck_cluster1 </span></span>
<span class="line"><span> where database=&#39;ads&#39; and table=&#39;ads_jd_erp_sale_outstock_replica&#39; </span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>进入zk清理任务</span></span>
<span class="line"><span>deleteall /clickhouse/distributed_ddl/query-0000011932</span></span>
<span class="line"><span>查询阻塞的任务</span></span>
<span class="line"><span>select * from system.distributed_ddl_queue where status != &#39;Finished&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>查看表大小</span></span>
<span class="line"><span>SELECT</span></span>
<span class="line"><span>    table AS \`表名\`,</span></span>
<span class="line"><span>    sum(rows) AS \`总行数\`,</span></span>
<span class="line"><span>    formatReadableSize(sum(data_uncompressed_bytes)) AS \`原始大小\`,</span></span>
<span class="line"><span>    formatReadableSize(sum(data_compressed_bytes)) AS \`压缩大小\`,</span></span>
<span class="line"><span>    round((sum(data_compressed_bytes) / sum(data_uncompressed_bytes)) * 100, 0) AS \`压缩率\`</span></span>
<span class="line"><span>FROM system.parts</span></span>
<span class="line"><span>GROUP BY table</span></span>
<span class="line"><span>order by sum(data_compressed_bytes) desc</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>修改字段名</span></span>
<span class="line"><span>ALTER TABLE visits RENAME COLUMN webBrowser TO browser</span></span>
<span class="line"><span>分布式集群下用分布式DDL修改字段名</span></span>
<span class="line"><span>ALTER TABLE visits on cluster shipin_cluster RENAME COLUMN webBrowser TO browser</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>新增字段</span></span>
<span class="line"><span> alter table ads_itemprice_sales_section_replica ON CLUSTER ck_cluster1 add column sort_mark Nullable(int)</span></span>
<span class="line"><span> alter table ads_itemprice_sales_section ON CLUSTER ck_cluster1 add column sort_mark Nullable(int)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="clickhouse表引擎" tabindex="-1"><a class="header-anchor" href="#clickhouse表引擎"><span>clickhouse表引擎</span></a></h2><table><thead><tr><th>系列</th><th>引擎</th><th>特点</th><th>场景</th></tr></thead><tbody><tr><td>Log</td><td>TinyLog</td><td>不支持并发读取数据文件，查询性能较差；格式简单，适合用来暂存中间数据；</td><td>Log系列表引擎功能相对简单，主要用于快速写入小表（1百万行左右的表），然后全部读出的场景。</td></tr><tr><td></td><td>StripLog</td><td>支持并发读取数据文件，查询性能比TinyLog好；将所有列存储在同一个大文件中，减少了文件个数；</td><td></td></tr><tr><td></td><td>Log</td><td>支持并发读取数据文件，查询性能比TinyLog好；每个列会单独存储在一个独立文件中。</td><td></td></tr><tr><td>Integration</td><td>Kafka</td><td>将Kafka Topic中的数据直接导入到ClickHouse；</td><td>该系统表引擎主要用于将外部数据导入到ClickHouse中，或者在ClickHouse中直接操作外部数据源。</td></tr><tr><td></td><td>MySQL</td><td>将Mysql作为存储引擎，直接在ClickHouse中对MySQL表进行select等操作；</td><td></td></tr><tr><td></td><td>JDBC/ODBC</td><td>通过指定jdbc、odbc连接串读取数据源；</td><td></td></tr><tr><td></td><td>HDFS</td><td>直接读取HDFS上的特定格式的数据文件；</td><td></td></tr><tr><td>Special</td><td>Memory</td><td>将数据存储在内存中，重启后会导致数据丢失。查询性能极好，适合于对于数据持久性没有要求的1亿一下的小表。在ClickHouse中，通常用来做临时表。</td><td>Special系列的表引擎，大多是为了特定场景而定制的</td></tr><tr><td></td><td>Buffer</td><td>为目标表设置一个内存buffer，当buffer达到了一定条件之后会flush到磁盘。</td><td></td></tr><tr><td></td><td>File</td><td>直接将本地文件作为数据存储；</td><td></td></tr><tr><td></td><td>Null</td><td>写入数据被丢弃、读取数据为空；</td><td></td></tr><tr><td>MergeTree</td><td>MergeTree</td><td>MergeTree表引擎主要用于海量数据分析，支持数据分区、存储有序、主键索引、稀疏索引、数据TTL等。MergeTree支持所有ClickHouse SQL语法，但是有些功能与MySQL并不一致，比如在MergeTree中主键并不用于去重</td><td>MergeTree系列才是官方主推的存储引擎，支持几乎所有ClickHouse核心功能。</td></tr><tr><td></td><td>ReplacingMergeTree</td><td>为了解决MergeTree相同主键无法去重的问题，ClickHouse提供了ReplacingMergeTree引擎，用来做去重。</td><td></td></tr><tr><td></td><td>CollapsingMergeTree</td><td>ClickHouse实现了CollapsingMergeTree来消除ReplacingMergeTree的限制。该引擎要求在建表语句中指定一个标记列Sign，后台Compaction时会将主键相同、Sign相反的行进行折叠，也即删除。</td><td></td></tr><tr><td></td><td>VersionedCollapsingMergeTree</td><td>为了解决CollapsingMergeTree乱序写入情况下无法正常折叠问题，VersionedCollapsingMergeTree表引擎在建表语句中新增了一列Version，用于在乱序情况下记录状态行与取消行的对应关系。主键相同，且Version相同、Sign相反的行，在Compaction时会被删除</td><td></td></tr><tr><td></td><td>SummingMergeTree</td><td>ClickHouse通过SummingMergeTree来支持对主键列进行预先聚合。在后台Compaction时，会将主键相同的多行进行sum求和，然后使用一行数据取而代之，从而大幅度降低存储空间占用，提升聚合计算性能。</td><td></td></tr><tr><td></td><td>AggregatingMergeTree</td><td>AggregatingMergeTree也是预先聚合引擎的一种，用于提升聚合计算的性能。与SummingMergeTree的区别在于：SummingMergeTree对非主键列进行sum聚合，而AggregatingMergeTree则可以指定各种聚合函数。</td><td></td></tr><tr><td></td><td>Replicated数据副本</td><td>副本不依赖分片。每个分片有它自己的独立副本，ReplicatedReplacingMergeTree引擎可用于按主键更新写入</td><td></td></tr></tbody></table><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>备注</span></span>
<span class="line"><span>关于单机去重：</span></span>
<span class="line"><span>MergeTree虽然有主键，但是不能去重，去重要用ReplacingMergeTree引擎，需要等待后台自动merge或通过optimize table table_name final DEDUPLICATE命令手动Merge后查询，手动Merge在数据量大的情况下会消耗大量资源，所以还是尽量不依赖手动去重功能，在写入数据前清空分区表。</span></span>
<span class="line"><span>关于更新写入：</span></span>
<span class="line"><span>可以使用ReplicatedReplacingMergeTree引擎，写入后执行optimize table table_name PARTITION &#39;2017-12-27&#39; final立即生效，也可以等待后台自动merge</span></span>
<span class="line"><span> 示例：</span></span>
<span class="line"><span>CREATE TABLE IF NOT EXISTS tmp.tmp_replica99</span></span>
<span class="line"><span>(</span></span>
<span class="line"><span>id Int32,</span></span>
<span class="line"><span>age UInt16,</span></span>
<span class="line"><span>name String,</span></span>
<span class="line"><span>\`date\` Date</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span>ENGINE = ReplicatedReplacingMergeTree(&#39;/clickhouse/tables/{layer}-{shard}/tmp_tmp_replica99&#39;, &#39;{replica}&#39;)</span></span>
<span class="line"><span>PARTITION BY date</span></span>
<span class="line"><span>PRIMARY KEY (id)</span></span>
<span class="line"><span>ORDER BY (id)</span></span>
<span class="line"><span>SETTINGS index_granularity = 8192</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>INSERT INTO tmp.tmp_replica99 (id, age, name, date) VALUES</span></span>
<span class="line"><span>(1, &#39;20&#39;,&#39;sam&#39;, &#39;2017-12-26&#39;),</span></span>
<span class="line"><span>(2, &#39;20&#39;,&#39;sam&#39;, &#39;2017-12-26&#39;),</span></span>
<span class="line"><span>(3, &#39;20&#39;,&#39;sam&#39;, &#39;2017-12-26&#39;),</span></span>
<span class="line"><span>(4, &#39;20&#39;,&#39;sam&#39;, &#39;2017-12-26&#39;),</span></span>
<span class="line"><span>(5, &#39;20&#39;,&#39;sam&#39;, &#39;2017-12-27&#39;),</span></span>
<span class="line"><span>(6, &#39;20&#39;,&#39;sam&#39;, &#39;2017-12-27&#39;),</span></span>
<span class="line"><span>(7, &#39;20&#39;,&#39;sam&#39;, &#39;2017-12-27&#39;),</span></span>
<span class="line"><span>(8, &#39;20&#39;,&#39;sam&#39;, &#39;2017-12-27&#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>select * from tmp.tmp_replica99</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>INSERT INTO tmp.tmp_replica99 (id, age, name, date) VALUES</span></span>
<span class="line"><span>(8, &#39;21&#39;,&#39;sam&#39;, &#39;2017-12-27&#39;),</span></span>
<span class="line"><span>(8, &#39;23&#39;,&#39;sam&#39;, &#39;2017-12-27&#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>optimize table tmp.tmp_replica99 final</span></span>
<span class="line"><span>id为8的只保留了最后一条</span></span>
<span class="line"><span>关于分布式去重：</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>-- 本地表</span></span>
<span class="line"><span>CREATE TABLE IF NOT EXISTS tmp.tmp_replica101 ON CLUSTER ck_cluster1</span></span>
<span class="line"><span>(</span></span>
<span class="line"><span>id Int32,</span></span>
<span class="line"><span>age UInt16,</span></span>
<span class="line"><span>name String,</span></span>
<span class="line"><span>\`date\` Date</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span>ENGINE = ReplicatedReplacingMergeTree(&#39;/clickhouse/tables/{layer}-{shard}/tmp_tmp_replica101&#39;, &#39;{replica}&#39;)</span></span>
<span class="line"><span>PARTITION BY date</span></span>
<span class="line"><span>PRIMARY KEY (id)</span></span>
<span class="line"><span>ORDER BY (id)</span></span>
<span class="line"><span>SETTINGS index_granularity = 8192</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 分布式（注意rand改成了sipHash64）</span></span>
<span class="line"><span>CREATE TABLE tmp.test_dist101</span></span>
<span class="line"><span>ON CLUSTER ck_cluster1</span></span>
<span class="line"><span>AS tmp.tmp_replica101</span></span>
<span class="line"><span>ENGINE = Distributed(ck_cluster1, tmp, tmp_replica101, sipHash64(id))</span></span>
<span class="line"><span></span></span>
<span class="line"><span>INSERT INTO tmp.test_dist101 (id, age, name, date) VALUES</span></span>
<span class="line"><span>(1, &#39;20&#39;,&#39;sam&#39;, &#39;2017-12-26&#39;),</span></span>
<span class="line"><span>(2, &#39;20&#39;,&#39;sam&#39;, &#39;2017-12-26&#39;),</span></span>
<span class="line"><span>(3, &#39;20&#39;,&#39;sam&#39;, &#39;2017-12-26&#39;),</span></span>
<span class="line"><span>(4, &#39;20&#39;,&#39;sam&#39;, &#39;2017-12-26&#39;),</span></span>
<span class="line"><span>(5, &#39;20&#39;,&#39;sam&#39;, &#39;2017-12-27&#39;),</span></span>
<span class="line"><span>(6, &#39;20&#39;,&#39;sam&#39;, &#39;2017-12-27&#39;),</span></span>
<span class="line"><span>(7, &#39;20&#39;,&#39;sam&#39;, &#39;2017-12-27&#39;),</span></span>
<span class="line"><span>(8, &#39;20&#39;,&#39;sam&#39;, &#39;2017-12-27&#39;);</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>INSERT INTO tmp.test_dist101 (id, age, name, date) VALUES</span></span>
<span class="line"><span>(8, &#39;21&#39;,&#39;sam&#39;, &#39;2017-12-27&#39;),</span></span>
<span class="line"><span>(8, &#39;23&#39;,&#39;sam&#39;, &#39;2017-12-27&#39;);</span></span>
<span class="line"><span>执行optimize没有用，查询的sql加final即可</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>SELECT * from tmp.test_dist101 final</span></span>
<span class="line"><span>Log系列</span></span>
<span class="line"><span>Log系列表引擎功能相对简单，主要用于快速写入小表（1百万行左右的表），然后全部读出的场景。</span></span>
<span class="line"><span>几种Log表引擎的共性是：</span></span>
<span class="line"><span>* 数据被顺序append写到磁盘上；</span></span>
<span class="line"><span>* 不支持delete、update；</span></span>
<span class="line"><span>* 不支持index；</span></span>
<span class="line"><span>* 不支持原子性写；</span></span>
<span class="line"><span>* insert会阻塞select操作。</span></span>
<span class="line"><span>它们彼此之间的区别是：</span></span>
<span class="line"><span>* TinyLog：不支持并发读取数据文件，查询性能较差；格式简单，适合用来暂存中间数据；</span></span>
<span class="line"><span>* StripLog：支持并发读取数据文件，查询性能比TinyLog好；将所有列存储在同一个大文件中，减少了文件个数；</span></span>
<span class="line"><span>* Log：支持并发读取数据文件，查询性能比TinyLog好；每个列会单独存储在一个独立文件中。</span></span>
<span class="line"><span>Integration系列</span></span>
<span class="line"><span>该系统表引擎主要用于将外部数据导入到ClickHouse中，或者在ClickHouse中直接操作外部数据源。</span></span>
<span class="line"><span>* Kafka：将Kafka Topic中的数据直接导入到ClickHouse；</span></span>
<span class="line"><span>* MySQL：将Mysql作为存储引擎，直接在ClickHouse中对MySQL表进行select等操作；</span></span>
<span class="line"><span>* JDBC/ODBC：通过指定jdbc、odbc连接串读取数据源；</span></span>
<span class="line"><span>* HDFS：直接读取HDFS上的特定格式的数据文件；</span></span>
<span class="line"><span>Special系列</span></span>
<span class="line"><span>Special系列的表引擎，大多是为了特定场景而定制的。这里也挑选几个简单介绍，不做详述。</span></span>
<span class="line"><span>* Memory：将数据存储在内存中，重启后会导致数据丢失。查询性能极好，适合于对于数据持久性没有要求的1亿一下的小表。在ClickHouse中，通常用来做临时表。</span></span>
<span class="line"><span>* Buffer：为目标表设置一个内存buffer，当buffer达到了一定条件之后会flush到磁盘。</span></span>
<span class="line"><span>* File：直接将本地文件作为数据存储；</span></span>
<span class="line"><span>* Null：写入数据被丢弃、读取数据为空；</span></span>
<span class="line"><span>MergeTree系列</span></span>
<span class="line"><span>Log、Special、Integration主要用于特殊用途，场景相对有限。MergeTree系列才是官方主推的存储引擎，支持几乎所有ClickHouse核心功能。</span></span>
<span class="line"><span>以下重点介绍MergeTree、ReplacingMergeTree、CollapsingMergeTree、VersionedCollapsingMergeTree、SummingMergeTree、AggregatingMergeTree引擎。</span></span>
<span class="line"><span>MergeTree</span></span>
<span class="line"><span>MergeTree表引擎主要用于海量数据分析，支持数据分区、存储有序、主键索引、稀疏索引、数据TTL等。MergeTree支持所有ClickHouse SQL语法，但是有些功能与MySQL并不一致，比如在MergeTree中主键并不用于去重，以下通过示例说明。</span></span>
<span class="line"><span>如下建表DDL所示，test_tbl的主键为(id, create_time)，并且按照主键进行存储排序，按照create_time进行数据分区，数据保留最近一个月。</span></span>
<span class="line"><span>CREATE TABLE test_tbl (</span></span>
<span class="line"><span>id UInt16,</span></span>
<span class="line"><span>create_time Date,</span></span>
<span class="line"><span>comment Nullable(String)</span></span>
<span class="line"><span>) ENGINE = MergeTree()</span></span>
<span class="line"><span>PARTITION BY create_time</span></span>
<span class="line"><span>ORDER BY (id, create_time)</span></span>
<span class="line"><span>PRIMARY KEY (id, create_time)</span></span>
<span class="line"><span>TTL create_time + INTERVAL 1 MONTH</span></span>
<span class="line"><span>SETTINGS index_granularity=8192;</span></span>
<span class="line"><span>写入数据：值得注意的是这里我们写入了几条primary key相同的数据。</span></span>
<span class="line"><span>insert into test_tbl values(0, &#39;2019-12-12&#39;, null);</span></span>
<span class="line"><span>insert into test_tbl values(0, &#39;2019-12-12&#39;, null);</span></span>
<span class="line"><span>insert into test_tbl values(1, &#39;2019-12-13&#39;, null);</span></span>
<span class="line"><span>insert into test_tbl values(1, &#39;2019-12-13&#39;, null);</span></span>
<span class="line"><span>insert into test_tbl values(2, &#39;2019-12-14&#39;, null);</span></span>
<span class="line"><span>查询数据： 可以看到虽然主键id、create_time相同的数据只有3条数据，但是结果却有5行。</span></span>
<span class="line"><span>select count(*) from test_tbl;</span></span>
<span class="line"><span>┌─count()─┐</span></span>
<span class="line"><span>│ 5 │</span></span>
<span class="line"><span>└─────────┘</span></span>
<span class="line"><span>select * from test_tbl;</span></span>
<span class="line"><span>┌─id─┬─create_time─┬─comment─┐</span></span>
<span class="line"><span>│ 2 │ 2019-12-14 │ ᴺᵁᴸᴸ │</span></span>
<span class="line"><span>└────┴─────────────┴─────────┘</span></span>
<span class="line"><span>┌─id─┬─create_time─┬─comment─┐</span></span>
<span class="line"><span>│ 1 │ 2019-12-13 │ ᴺᵁᴸᴸ │</span></span>
<span class="line"><span>└────┴─────────────┴─────────┘</span></span>
<span class="line"><span>┌─id─┬─create_time─┬─comment─┐</span></span>
<span class="line"><span>│ 0 │ 2019-12-12 │ ᴺᵁᴸᴸ │</span></span>
<span class="line"><span>└────┴─────────────┴─────────┘</span></span>
<span class="line"><span>┌─id─┬─create_time─┬─comment─┐</span></span>
<span class="line"><span>│ 1 │ 2019-12-13 │ ᴺᵁᴸᴸ │</span></span>
<span class="line"><span>└────┴─────────────┴─────────┘</span></span>
<span class="line"><span>┌─id─┬─create_time─┬─comment─┐</span></span>
<span class="line"><span>│ 0 │ 2019-12-12 │ ᴺᵁᴸᴸ │</span></span>
<span class="line"><span>└────┴─────────────┴─────────┘</span></span>
<span class="line"><span>由于MergeTree采用类似LSM tree的结构，很多存储层处理逻辑直到Compaction期间才会发生。因此强制后台compaction执行完毕，再次查询，发现仍旧有5条数据。</span></span>
<span class="line"><span>optimize table test_tbl final;</span></span>
<span class="line"><span>select count(*) from test_tbl;</span></span>
<span class="line"><span>┌─count()─┐</span></span>
<span class="line"><span>│ 5 │</span></span>
<span class="line"><span>└─────────┘</span></span>
<span class="line"><span>select * from test_tbl;</span></span>
<span class="line"><span>┌─id─┬─create_time─┬─comment─┐</span></span>
<span class="line"><span>│ 2 │ 2019-12-14 │ ᴺᵁᴸᴸ │</span></span>
<span class="line"><span>└────┴─────────────┴─────────┘</span></span>
<span class="line"><span>┌─id─┬─create_time─┬─comment─┐</span></span>
<span class="line"><span>│ 0 │ 2019-12-12 │ ᴺᵁᴸᴸ │</span></span>
<span class="line"><span>│ 0 │ 2019-12-12 │ ᴺᵁᴸᴸ │</span></span>
<span class="line"><span>└────┴─────────────┴─────────┘</span></span>
<span class="line"><span>┌─id─┬─create_time─┬─comment─┐</span></span>
<span class="line"><span>│ 1 │ 2019-12-13 │ ᴺᵁᴸᴸ │</span></span>
<span class="line"><span>│ 1 │ 2019-12-13 │ ᴺᵁᴸᴸ │</span></span>
<span class="line"><span>└────┴─────────────┴─────────┘</span></span>
<span class="line"><span>结合以上示例可以看到，MergeTree虽然有主键索引，但是其主要作用是加速查询，而不是类似MySQL等数据库用来保持记录唯一。即便在Compaction完成后，主键相同的数据行也仍旧共同存在。</span></span>
<span class="line"><span>ReplacingMergeTree</span></span>
<span class="line"><span>为了解决MergeTree相同主键无法去重的问题，ClickHouse提供了ReplacingMergeTree引擎，用来做去重。</span></span>
<span class="line"><span>示例如下：</span></span>
<span class="line"><span>-- 建表</span></span>
<span class="line"><span>CREATE TABLE test_tbl_replacing (</span></span>
<span class="line"><span>id UInt16,</span></span>
<span class="line"><span>create_time Date,</span></span>
<span class="line"><span>comment Nullable(String)</span></span>
<span class="line"><span>) ENGINE = ReplacingMergeTree()</span></span>
<span class="line"><span>PARTITION BY create_time</span></span>
<span class="line"><span>ORDER BY (id, create_time)</span></span>
<span class="line"><span>PRIMARY KEY (id, create_time)</span></span>
<span class="line"><span>TTL create_time + INTERVAL 1 MONTH</span></span>
<span class="line"><span>SETTINGS index_granularity=8192;</span></span>
<span class="line"><span>-- 写入主键重复的数据</span></span>
<span class="line"><span>insert into test_tbl_replacing values(0, &#39;2019-12-12&#39;, null);</span></span>
<span class="line"><span>insert into test_tbl_replacing values(0, &#39;2019-12-12&#39;, null);</span></span>
<span class="line"><span>insert into test_tbl_replacing values(1, &#39;2019-12-13&#39;, null);</span></span>
<span class="line"><span>insert into test_tbl_replacing values(1, &#39;2019-12-13&#39;, null);</span></span>
<span class="line"><span>insert into test_tbl_replacing values(2, &#39;2019-12-14&#39;, null);</span></span>
<span class="line"><span>-- 查询，可以看到未compaction之前，主键重复的数据，仍旧存在。</span></span>
<span class="line"><span>select count(*) from test_tbl_replacing;</span></span>
<span class="line"><span>┌─count()─┐</span></span>
<span class="line"><span>│ 5 │</span></span>
<span class="line"><span>└─────────┘</span></span>
<span class="line"><span>select * from test_tbl_replacing;</span></span>
<span class="line"><span>┌─id─┬─create_time─┬─comment─┐</span></span>
<span class="line"><span>│ 0 │ 2019-12-12 │ ᴺᵁᴸᴸ │</span></span>
<span class="line"><span>└────┴─────────────┴─────────┘</span></span>
<span class="line"><span>┌─id─┬─create_time─┬─comment─┐</span></span>
<span class="line"><span>│ 0 │ 2019-12-12 │ ᴺᵁᴸᴸ │</span></span>
<span class="line"><span>└────┴─────────────┴─────────┘</span></span>
<span class="line"><span>┌─id─┬─create_time─┬─comment─┐</span></span>
<span class="line"><span>│ 1 │ 2019-12-13 │ ᴺᵁᴸᴸ │</span></span>
<span class="line"><span>└────┴─────────────┴─────────┘</span></span>
<span class="line"><span>┌─id─┬─create_time─┬─comment─┐</span></span>
<span class="line"><span>│ 1 │ 2019-12-13 │ ᴺᵁᴸᴸ │</span></span>
<span class="line"><span>└────┴─────────────┴─────────┘</span></span>
<span class="line"><span>┌─id─┬─create_time─┬─comment─┐</span></span>
<span class="line"><span>│ 2 │ 2019-12-14 │ ᴺᵁᴸᴸ │</span></span>
<span class="line"><span>└────┴─────────────┴─────────┘</span></span>
<span class="line"><span>-- 强制后台compaction：</span></span>
<span class="line"><span>optimize table test_tbl_replacing final;</span></span>
<span class="line"><span>-- 再次查询：主键重复的数据已经消失。</span></span>
<span class="line"><span>select count(*) from test_tbl_replacing;</span></span>
<span class="line"><span>┌─count()─┐</span></span>
<span class="line"><span>│ 3 │</span></span>
<span class="line"><span>└─────────┘</span></span>
<span class="line"><span>select * from test_tbl_replacing;</span></span>
<span class="line"><span>┌─id─┬─create_time─┬─comment─┐</span></span>
<span class="line"><span>│ 2 │ 2019-12-14 │ ᴺᵁᴸᴸ │</span></span>
<span class="line"><span>└────┴─────────────┴─────────┘</span></span>
<span class="line"><span>┌─id─┬─create_time─┬─comment─┐</span></span>
<span class="line"><span>│ 1 │ 2019-12-13 │ ᴺᵁᴸᴸ │</span></span>
<span class="line"><span>└────┴─────────────┴─────────┘</span></span>
<span class="line"><span>┌─id─┬─create_time─┬─comment─┐</span></span>
<span class="line"><span>│ 0 │ 2019-12-12 │ ᴺᵁᴸᴸ │</span></span>
<span class="line"><span>└────┴─────────────┴─────────┘</span></span>
<span class="line"><span>虽然ReplacingMergeTree提供了主键去重的能力，但是仍旧有以下限制：</span></span>
<span class="line"><span>* 在没有彻底optimize之前，可能无法达到主键去重的效果，比如部分数据已经被去重，而另外一部分数据仍旧有主键重复；</span></span>
<span class="line"><span>* 在分布式场景下，相同primary key的数据可能被sharding到不同节点上，不同shard间可能无法去重；</span></span>
<span class="line"><span>* optimize是后台动作，无法预测具体执行时间点；</span></span>
<span class="line"><span>* 手动执行optimize在海量数据场景下要消耗大量时间，无法满足业务即时查询的需求；</span></span>
<span class="line"><span>因此ReplacingMergeTree更多被用于确保数据最终被去重，而无法保证查询过程中主键不重复。</span></span>
<span class="line"><span>CollapsingMergeTree</span></span>
<span class="line"><span>ClickHouse实现了CollapsingMergeTree来消除ReplacingMergeTree的限制。该引擎要求在建表语句中指定一个标记列Sign，后台Compaction时会将主键相同、Sign相反的行进行折叠，也即删除。</span></span>
<span class="line"><span>CollapsingMergeTree将行按照Sign的值分为两类：Sign=1的行称之为状态行，Sign=-1的行称之为取消行。</span></span>
<span class="line"><span>每次需要新增状态时，写入一行状态行；需要删除状态时，则写入一行取消行。</span></span>
<span class="line"><span>在后台Compaction时，状态行与取消行会自动做折叠（删除）处理。而尚未进行Compaction的数据，状态行与取消行同时存在。</span></span>
<span class="line"><span>因此为了能够达到主键折叠（删除）的目的，需要业务层进行适当改造：</span></span>
<span class="line"><span>1） 执行删除操作需要写入取消行，而取消行中需要包含与原始状态行一样的数据（Sign列除外）。所以在应用层需要记录原始状态行的值，或者在执行删除操作前先查询数据库获取原始状态行；</span></span>
<span class="line"><span>2）由于后台Compaction时机无法预测，在发起查询时，状态行和取消行可能尚未被折叠；另外，ClickHouse无法保证primary key相同的行落在同一个节点上，不在同一节点上的数据无法折叠。因此在进行count(*)、sum(col)等聚合计算时，可能会存在数据冗余的情况。为了获得正确结果，业务层需要改写SQL，将count()、sum(col)分别改写为sum(Sign)、sum(col * Sign)。</span></span>
<span class="line"><span>以下用示例说明：</span></span>
<span class="line"><span>-- 建表</span></span>
<span class="line"><span>CREATE TABLE UAct</span></span>
<span class="line"><span>(</span></span>
<span class="line"><span>UserID UInt64,</span></span>
<span class="line"><span>PageViews UInt8,</span></span>
<span class="line"><span>Duration UInt8,</span></span>
<span class="line"><span>Sign Int8</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span>ENGINE = CollapsingMergeTree(Sign)</span></span>
<span class="line"><span>ORDER BY UserID;</span></span>
<span class="line"><span>-- 插入状态行，注意sign一列的值为1</span></span>
<span class="line"><span>INSERT INTO UAct VALUES (4324182021466249494, 5, 146, 1);</span></span>
<span class="line"><span>-- 插入一行取消行，用于抵消上述状态行。注意sign一列的值为-1，其余值与状态行一致；</span></span>
<span class="line"><span>-- 并且插入一行主键相同的新状态行，用来将PageViews从5更新至6，将Duration从146更新为185.</span></span>
<span class="line"><span>INSERT INTO UAct VALUES (4324182021466249494, 5, 146, -1), (4324182021466249494, 6, 185, 1);</span></span>
<span class="line"><span>-- 查询数据：可以看到未Compaction之前，状态行与取消行共存。</span></span>
<span class="line"><span>SELECT * FROM UAct;</span></span>
<span class="line"><span>┌──────────────UserID─┬─PageViews─┬─Duration─┬─Sign─┐</span></span>
<span class="line"><span>│ 4324182021466249494 │ 5 │ 146 │ -1 │</span></span>
<span class="line"><span>│ 4324182021466249494 │ 6 │ 185 │ 1 │</span></span>
<span class="line"><span>└─────────────────────┴───────────┴──────────┴──────┘</span></span>
<span class="line"><span>┌──────────────UserID─┬─PageViews─┬─Duration─┬─Sign─┐</span></span>
<span class="line"><span>│ 4324182021466249494 │ 5 │ 146 │ 1 │</span></span>
<span class="line"><span>└─────────────────────┴───────────┴──────────┴──────┘</span></span>
<span class="line"><span>-- 为了获取正确的sum值，需要改写SQL：</span></span>
<span class="line"><span>-- sum(PageViews) =&gt; sum(PageViews * Sign)、</span></span>
<span class="line"><span>-- sum(Duration) =&gt; sum(Duration * Sign)</span></span>
<span class="line"><span>SELECT</span></span>
<span class="line"><span>UserID,</span></span>
<span class="line"><span>sum(PageViews * Sign) AS PageViews,</span></span>
<span class="line"><span>sum(Duration * Sign) AS Duration</span></span>
<span class="line"><span>FROM UAct</span></span>
<span class="line"><span>GROUP BY UserID</span></span>
<span class="line"><span>HAVING sum(Sign) &gt; 0;</span></span>
<span class="line"><span>┌──────────────UserID─┬─PageViews─┬─Duration─┐</span></span>
<span class="line"><span>│ 4324182021466249494 │ 6 │ 185 │</span></span>
<span class="line"><span>└─────────────────────┴───────────┴──────────┘</span></span>
<span class="line"><span>-- 强制后台Compaction</span></span>
<span class="line"><span>optimize table UAct final;</span></span>
<span class="line"><span>-- 再次查询，可以看到状态行、取消行已经被折叠，只剩下最新的一行状态行。</span></span>
<span class="line"><span>select * from UAct;</span></span>
<span class="line"><span>┌──────────────UserID─┬─PageViews─┬─Duration─┬─Sign─┐</span></span>
<span class="line"><span>│ 4324182021466249494 │ 6 │ 185 │ 1 │</span></span>
<span class="line"><span>└─────────────────────┴───────────┴──────────┴──────┘</span></span>
<span class="line"><span>CollapsingMergeTree虽然解决了主键相同的数据即时删除的问题，但是状态持续变化且多线程并行写入情况下，状态行与取消行位置可能乱序，导致无法正常折叠。</span></span>
<span class="line"><span>如下面例子所示：</span></span>
<span class="line"><span>乱序插入示例。</span></span>
<span class="line"><span>-- 建表</span></span>
<span class="line"><span>CREATE TABLE UAct_order</span></span>
<span class="line"><span>(</span></span>
<span class="line"><span>UserID UInt64,</span></span>
<span class="line"><span>PageViews UInt8,</span></span>
<span class="line"><span>Duration UInt8,</span></span>
<span class="line"><span>Sign Int8</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span>ENGINE = CollapsingMergeTree(Sign)</span></span>
<span class="line"><span>ORDER BY UserID;</span></span>
<span class="line"><span>-- 先插入取消行</span></span>
<span class="line"><span>INSERT INTO UAct_order VALUES (4324182021466249495, 5, 146, -1);</span></span>
<span class="line"><span>-- 后插入状态行</span></span>
<span class="line"><span>INSERT INTO UAct_order VALUES (4324182021466249495, 5, 146, 1);</span></span>
<span class="line"><span>-- 强制Compaction</span></span>
<span class="line"><span>optimize table UAct_order final;</span></span>
<span class="line"><span>-- 可以看到即便Compaction之后也无法进行主键折叠: 2行数据仍旧都存在。</span></span>
<span class="line"><span>select * from UAct_order;</span></span>
<span class="line"><span>┌──────────────UserID─┬─PageViews─┬─Duration─┬─Sign─┐</span></span>
<span class="line"><span>│ 4324182021466249495 │ 5 │ 146 │ -1 │</span></span>
<span class="line"><span>│ 4324182021466249495 │ 5 │ 146 │ 1 │</span></span>
<span class="line"><span>└─────────────────────┴───────────┴──────────┴──────┘</span></span>
<span class="line"><span>VersionedCollapsingMergeTree</span></span>
<span class="line"><span>为了解决CollapsingMergeTree乱序写入情况下无法正常折叠问题，VersionedCollapsingMergeTree表引擎在建表语句中新增了一列Version，用于在乱序情况下记录状态行与取消行的对应关系。主键相同，且Version相同、Sign相反的行，在Compaction时会被删除。</span></span>
<span class="line"><span>与CollapsingMergeTree类似， 为了获得正确结果，业务层需要改写SQL，将count()、sum(col)分别改写为sum(Sign)、sum(col * Sign)。</span></span>
<span class="line"><span>示例如下：</span></span>
<span class="line"><span>乱序插入示例。</span></span>
<span class="line"><span>-- 建表</span></span>
<span class="line"><span>CREATE TABLE UAct_version</span></span>
<span class="line"><span>(</span></span>
<span class="line"><span>UserID UInt64,</span></span>
<span class="line"><span>PageViews UInt8,</span></span>
<span class="line"><span>Duration UInt8,</span></span>
<span class="line"><span>Sign Int8,</span></span>
<span class="line"><span>Version UInt8</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span>ENGINE = VersionedCollapsingMergeTree(Sign, Version)</span></span>
<span class="line"><span>ORDER BY UserID;</span></span>
<span class="line"><span>-- 先插入一行取消行，注意Signz=-1, Version=1</span></span>
<span class="line"><span>INSERT INTO UAct_version VALUES (4324182021466249494, 5, 146, -1, 1);</span></span>
<span class="line"><span>-- 后插入一行状态行，注意Sign=1, Version=1；及一行新的状态行注意Sign=1, Version=2，将PageViews从5更新至6，将Duration从146更新为185。</span></span>
<span class="line"><span>INSERT INTO UAct_version VALUES (4324182021466249494, 5, 146, 1, 1),(4324182021466249494, 6, 185, 1, 2);</span></span>
<span class="line"><span>-- 查询可以看到未compaction情况下，所有行都可见。</span></span>
<span class="line"><span>SELECT * FROM UAct_version;</span></span>
<span class="line"><span>┌──────────────UserID─┬─PageViews─┬─Duration─┬─Sign─┐</span></span>
<span class="line"><span>│ 4324182021466249494 │ 5 │ 146 │ -1 │</span></span>
<span class="line"><span>│ 4324182021466249494 │ 6 │ 185 │ 1 │</span></span>
<span class="line"><span>└─────────────────────┴───────────┴──────────┴──────┘</span></span>
<span class="line"><span>┌──────────────UserID─┬─PageViews─┬─Duration─┬─Sign─┐</span></span>
<span class="line"><span>│ 4324182021466249494 │ 5 │ 146 │ 1 │</span></span>
<span class="line"><span>└─────────────────────┴───────────┴──────────┴──────┘</span></span>
<span class="line"><span>-- 为了获取正确的sum值，需要改写SQL：</span></span>
<span class="line"><span>-- sum(PageViews) =&gt; sum(PageViews * Sign)、</span></span>
<span class="line"><span>-- sum(Duration) =&gt; sum(Duration * Sign)</span></span>
<span class="line"><span>SELECT</span></span>
<span class="line"><span>UserID,</span></span>
<span class="line"><span>sum(PageViews * Sign) AS PageViews,</span></span>
<span class="line"><span>sum(Duration * Sign) AS Duration</span></span>
<span class="line"><span>FROM UAct_version</span></span>
<span class="line"><span>GROUP BY UserID</span></span>
<span class="line"><span>HAVING sum(Sign) &gt; 0;</span></span>
<span class="line"><span>┌──────────────UserID─┬─PageViews─┬─Duration─┐</span></span>
<span class="line"><span>│ 4324182021466249494 │ 6 │ 185 │</span></span>
<span class="line"><span>└─────────────────────┴───────────┴──────────┘</span></span>
<span class="line"><span>-- 强制后台Compaction</span></span>
<span class="line"><span>optimize table UAct_version final;</span></span>
<span class="line"><span>-- 再次查询，可以看到即便取消行与状态行位置乱序，仍旧可以被正确折叠。</span></span>
<span class="line"><span>select * from UAct_version;</span></span>
<span class="line"><span>┌──────────────UserID─┬─PageViews─┬─Duration─┬─Sign─┬─Version─┐</span></span>
<span class="line"><span>│ 4324182021466249494 │ 6 │ 185 │ 1 │ 2 │</span></span>
<span class="line"><span>└─────────────────────┴───────────┴──────────┴──────┴─────────┘</span></span>
<span class="line"><span>SummingMergeTree</span></span>
<span class="line"><span>ClickHouse通过SummingMergeTree来支持对主键列进行预先聚合。在后台Compaction时，会将主键相同的多行进行sum求和，然后使用一行数据取而代之，从而大幅度降低存储空间占用，提升聚合计算性能。</span></span>
<span class="line"><span>值得注意的是：</span></span>
<span class="line"><span>* ClickHouse只在后台Compaction时才会进行数据的预先聚合，而compaction的执行时机无法预测，所以可能存在部分数据已经被预先聚合、部分数据尚未被聚合的情况。因此，在执行聚合计算时，SQL中仍需要使用GROUP BY子句。</span></span>
<span class="line"><span>* 在预先聚合时，ClickHouse会对主键列之外的其他所有列进行预聚合。如果这些列是可聚合的（比如数值类型），则直接sum；如果不可聚合（比如String类型），则随机选择一个值。</span></span>
<span class="line"><span>* 通常建议将SummingMergeTree与MergeTree配合使用，使用MergeTree来存储具体明细，使用SummingMergeTree来存储预先聚合的结果加速查询。</span></span>
<span class="line"><span>示例如下：</span></span>
<span class="line"><span>-- 建表</span></span>
<span class="line"><span>CREATE TABLE summtt</span></span>
<span class="line"><span>(</span></span>
<span class="line"><span>key UInt32,</span></span>
<span class="line"><span>value UInt32</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span>ENGINE = SummingMergeTree()</span></span>
<span class="line"><span>ORDER BY key</span></span>
<span class="line"><span>-- 插入数据</span></span>
<span class="line"><span>INSERT INTO summtt Values(1,1),(1,2),(2,1)</span></span>
<span class="line"><span>-- compaction前查询，仍存在多行</span></span>
<span class="line"><span>select * from summtt;</span></span>
<span class="line"><span>┌─key─┬─value─┐</span></span>
<span class="line"><span>│ 1 │ 1 │</span></span>
<span class="line"><span>│ 1 │ 2 │</span></span>
<span class="line"><span>│ 2 │ 1 │</span></span>
<span class="line"><span>└─────┴───────┘</span></span>
<span class="line"><span>-- 通过GROUP BY进行聚合计算</span></span>
<span class="line"><span>SELECT key, sum(value) FROM summtt GROUP BY key</span></span>
<span class="line"><span>┌─key─┬─sum(value)─┐</span></span>
<span class="line"><span>│ 2 │ 1 │</span></span>
<span class="line"><span>│ 1 │ 3 │</span></span>
<span class="line"><span>└─────┴────────────┘</span></span>
<span class="line"><span>-- 强制compaction</span></span>
<span class="line"><span>optimize table summtt final;</span></span>
<span class="line"><span>-- compaction后查询，可以看到数据已经被预先聚合</span></span>
<span class="line"><span>select * from summtt;</span></span>
<span class="line"><span>┌─key─┬─value─┐</span></span>
<span class="line"><span>│ 1 │ 3 │</span></span>
<span class="line"><span>│ 2 │ 1 │</span></span>
<span class="line"><span>└─────┴───────┘</span></span>
<span class="line"><span>-- compaction后，仍旧需要通过GROUP BY进行聚合计算</span></span>
<span class="line"><span>SELECT key, sum(value) FROM summtt GROUP BY key</span></span>
<span class="line"><span>┌─key─┬─sum(value)─┐</span></span>
<span class="line"><span>│ 2 │ 1 │</span></span>
<span class="line"><span>│ 1 │ 3 │</span></span>
<span class="line"><span>└─────┴────────────┘</span></span>
<span class="line"><span>AggregatingMergeTree</span></span>
<span class="line"><span>AggregatingMergeTree也是预先聚合引擎的一种，用于提升聚合计算的性能。与SummingMergeTree的区别在于：SummingMergeTree对非主键列进行sum聚合，而AggregatingMergeTree则可以指定各种聚合函数。</span></span>
<span class="line"><span>AggregatingMergeTree的语法比较复杂，需要结合物化视图或ClickHouse的特殊数据类型AggregateFunction一起使用。在insert和select时，也有独特的写法和要求：写入时需要使用-State语法，查询时使用-Merge语法。</span></span>
<span class="line"><span>以下通过示例进行介绍。</span></span>
<span class="line"><span>示例一：配合物化视图使用。</span></span>
<span class="line"><span>-- 建立明细表</span></span>
<span class="line"><span>CREATE TABLE visits</span></span>
<span class="line"><span>(</span></span>
<span class="line"><span>UserID UInt64,</span></span>
<span class="line"><span>CounterID UInt8,</span></span>
<span class="line"><span>StartDate Date,</span></span>
<span class="line"><span>Sign Int8</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span>ENGINE = CollapsingMergeTree(Sign)</span></span>
<span class="line"><span>ORDER BY UserID;</span></span>
<span class="line"><span>-- 对明细表建立物化视图，该物化视图对明细表进行预先聚合</span></span>
<span class="line"><span>-- 注意：预先聚合使用的函数分别为： sumState, uniqState。对应于写入语法&lt;agg&gt;-State.</span></span>
<span class="line"><span>CREATE MATERIALIZED VIEW visits_agg_view</span></span>
<span class="line"><span>ENGINE = AggregatingMergeTree() PARTITION BY toYYYYMM(StartDate) ORDER BY (CounterID, StartDate)</span></span>
<span class="line"><span>AS SELECT</span></span>
<span class="line"><span>CounterID,</span></span>
<span class="line"><span>StartDate,</span></span>
<span class="line"><span>sumState(Sign) AS Visits,</span></span>
<span class="line"><span>uniqState(UserID) AS Users</span></span>
<span class="line"><span>FROM visits</span></span>
<span class="line"><span>GROUP BY CounterID, StartDate;</span></span>
<span class="line"><span>-- 插入明细数据</span></span>
<span class="line"><span>INSERT INTO visits VALUES(0, 0, &#39;2019-11-11&#39;, 1);</span></span>
<span class="line"><span>INSERT INTO visits VALUES(1, 1, &#39;2019-11-12&#39;, 1);</span></span>
<span class="line"><span>-- 对物化视图进行最终的聚合操作</span></span>
<span class="line"><span>-- 注意：使用的聚合函数为 sumMerge， uniqMerge。对应于查询语法&lt;agg&gt;-Merge.</span></span>
<span class="line"><span>SELECT</span></span>
<span class="line"><span>StartDate,</span></span>
<span class="line"><span>sumMerge(Visits) AS Visits,</span></span>
<span class="line"><span>uniqMerge(Users) AS Users</span></span>
<span class="line"><span>FROM visits_agg_view</span></span>
<span class="line"><span>GROUP BY StartDate</span></span>
<span class="line"><span>ORDER BY StartDate;</span></span>
<span class="line"><span>-- 普通函数 sum, uniq不再可以使用</span></span>
<span class="line"><span>-- 如下SQL会报错： Illegal type AggregateFunction(sum, Int8) of argument</span></span>
<span class="line"><span>SELECT</span></span>
<span class="line"><span>StartDate,</span></span>
<span class="line"><span>sum(Visits),</span></span>
<span class="line"><span>uniq(Users)</span></span>
<span class="line"><span>FROM visits_agg_view</span></span>
<span class="line"><span>GROUP BY StartDate</span></span>
<span class="line"><span>ORDER BY StartDate;</span></span>
<span class="line"><span>示例二：配合特殊数据类型AggregateFunction使用。</span></span>
<span class="line"><span>-- 建立明细表</span></span>
<span class="line"><span>CREATE TABLE detail_table</span></span>
<span class="line"><span>( CounterID UInt8,</span></span>
<span class="line"><span>StartDate Date,</span></span>
<span class="line"><span>UserID UInt64</span></span>
<span class="line"><span>) ENGINE = MergeTree()</span></span>
<span class="line"><span>PARTITION BY toYYYYMM(StartDate)</span></span>
<span class="line"><span>ORDER BY (CounterID, StartDate);</span></span>
<span class="line"><span>-- 插入明细数据</span></span>
<span class="line"><span>INSERT INTO detail_table VALUES(0, &#39;2019-11-11&#39;, 1);</span></span>
<span class="line"><span>INSERT INTO detail_table VALUES(1, &#39;2019-11-12&#39;, 1);</span></span>
<span class="line"><span>-- 建立预先聚合表，</span></span>
<span class="line"><span>-- 注意：其中UserID一列的类型为：AggregateFunction(uniq, UInt64)</span></span>
<span class="line"><span>CREATE TABLE agg_table</span></span>
<span class="line"><span>( CounterID UInt8,</span></span>
<span class="line"><span>StartDate Date,</span></span>
<span class="line"><span>UserID AggregateFunction(uniq, UInt64)</span></span>
<span class="line"><span>) ENGINE = AggregatingMergeTree()</span></span>
<span class="line"><span>PARTITION BY toYYYYMM(StartDate)</span></span>
<span class="line"><span>ORDER BY (CounterID, StartDate);</span></span>
<span class="line"><span>-- 从明细表中读取数据，插入聚合表。</span></span>
<span class="line"><span>-- 注意：子查询中使用的聚合函数为 uniqState， 对应于写入语法&lt;agg&gt;-State</span></span>
<span class="line"><span>INSERT INTO agg_table</span></span>
<span class="line"><span>select CounterID, StartDate, uniqState(UserID)</span></span>
<span class="line"><span>from detail_table</span></span>
<span class="line"><span>group by CounterID, StartDate</span></span>
<span class="line"><span>-- 不能使用普通insert语句向AggregatingMergeTree中插入数据。</span></span>
<span class="line"><span>-- 本SQL会报错：Cannot convert UInt64 to AggregateFunction(uniq, UInt64)</span></span>
<span class="line"><span>INSERT INTO agg_table VALUES(1, &#39;2019-11-12&#39;, 1);</span></span>
<span class="line"><span>-- 从聚合表中查询。</span></span>
<span class="line"><span>-- 注意：select中使用的聚合函数为uniqMerge，对应于查询语法&lt;agg&gt;-Merge</span></span>
<span class="line"><span>SELECT uniqMerge(UserID) AS state</span></span>
<span class="line"><span>FROM agg_table</span></span>
<span class="line"><span>GROUP BY CounterID, StartDate;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="clickhouse性能优化" tabindex="-1"><a class="header-anchor" href="#clickhouse性能优化"><span>clickhouse性能优化</span></a></h2><p>数据类型</p><ul><li>建表时能用数值型或日期时间型表示的字段，就不要用字符串——全String类型在以Hive为中心的数仓建设中常见，但CK环境不应受此影响。</li><li>虽然clickhouse底层将DateTime存储为时间戳Long类型，但不建议直接存储Long类型，因为DateTime不需要经过函数转换处理，执行效率高、可读性好。</li><li>官方已经指出Nullable类型几乎总是会拖累性能，因为存储Nullable列时需要创建一个额外的文件来存储NULL的标记，并且Nullable列无法被索引。因此除非极特殊情况，应直接使用字段默认值表示空，或者自行指定一个在业务中无意义的值（例如用-1表示没有商品ID）。</li><li>数值类型分组最快，在新版本中ck会对string类型进行一次hash映射再分组 分区和索引</li><li>分区粒度根据业务特点决定，不宜过粗或过细。一般选择按天分区，也可指定为tuple()；以单表1亿数据为例，分区大小控制在10-30个为最佳。</li><li>必须指定索引列，clickhouse中的索引列即排序列，通过order by指定，一般在查询条件中经常被用来充当筛选条件的属性被纳入进来；</li><li>可以是单一维度，也可以是组合维度的索引；通常需要满足高基列在前、查询频率大的在前原则；</li><li>还有基数特别大的不适合做索引列，如用户表的userid字段；通常筛选后的数据满足在百万以内为最佳。 表参数</li><li>index_granularity 是用来控制索引粒度的 默认是8192，如非必须不建议调整。</li><li>如果表中不是必须保留全量历史数据，建议指定TTL，可以免去手动过期历史数据的麻烦。TTL也可以通过ALTER TABLE语句随时修改。</li></ul><h2 id="clickhouse-创建表等命令" tabindex="-1"><a class="header-anchor" href="#clickhouse-创建表等命令"><span>clickhouse 创建表等命令</span></a></h2><p>启动命令 systemctl start clickhouse systemctl start clickhouse9001</p><p>service clickhouse-server stop</p><p>clickhouse start su -s /bin/sh &#39;clickhouse&#39; -c &#39;/usr/bin/clickhouse-server --config-file /etc/clickhouse-server/config.xml --pid-file /var/run/clickhouse-server/clickhouse-server.pid --daemon&#39;</p><p>su -s /bin/sh &#39;clickhouse&#39; -c &#39;/usr/bin/clickhouse-server --config-file /etc/clickhouse-server/config9001.xml --pid-file /var/run/clickhouse-server/clickhouse-server9001.pid --daemon&#39;</p><p>su -s /bin/sh &#39;clickhouse&#39; -c &#39;/usr/bin/clickhouse-server --config-file /etc/clickhouse-server/config.xml --daemon&#39;</p><p>su -s /bin/sh &#39;clickhouse&#39; -c &#39;/usr/bin/clickhouse-server --config-file /etc/clickhouse-server/config9001.xml --daemon&#39;</p><p>命令行登录 clickhouse-client -h 127.0.0.1 -u default --password 6lYaUiFx</p><p>一次性在集群每个机器上建立本地表 CREATE TABLE IF NOT EXISTS default.test_replica ON CLUSTER ck_cluster1 ( id Int32, age UInt16, name String, <code>date</code> Date ) ENGINE = ReplicatedMergeTree(&#39;/clickhouse/tables/{layer}-{shard}/default_test_replica&#39;, &#39;{replica}&#39;) PARTITION BY date PRIMARY KEY (id) ORDER BY (id, age) SETTINGS index_granularity = 8192;</p><p>一次性在集群的每个机器上面建立分布式表 CREATE TABLE default.test_dist ON CLUSTER ck_cluster1 AS default.test_replica ENGINE = Distributed(ck_cluster1, default, test_replica, rand())</p><p>删除表 drop TABLE default.test_replica ON CLUSTER ck_cluster1 drop TABLE default.test_dist ON CLUSTER ck_cluster1</p><p>数据写入分布式表 INSERT INTO default.test_dist (id, age, name, date) VALUES (1, &#39;20&#39;,&#39;sam&#39;, &#39;2017-12-26&#39;), (2, &#39;20&#39;,&#39;sam&#39;, &#39;2017-12-26&#39;), (3, &#39;20&#39;,&#39;sam&#39;, &#39;2017-12-26&#39;), (4, &#39;20&#39;,&#39;sam&#39;, &#39;2017-12-26&#39;), (5, &#39;20&#39;,&#39;sam&#39;, &#39;2017-12-27&#39;), (6, &#39;20&#39;,&#39;sam&#39;, &#39;2017-12-27&#39;), (7, &#39;20&#39;,&#39;sam&#39;, &#39;2017-12-27&#39;), (8, &#39;20&#39;,&#39;sam&#39;, &#39;2017-12-27&#39;); 数据会分布到各个节点本地表default.test_replica中，查询时使用分布式表default.test_dist</p><p>删除指定分区 ALTER TABLE default.test_replica ON CLUSTER ck_cluster1 DROP PARTITION &#39;2017-12-27&#39;;</p><p>查看表分区 select database,table,partition,partition_id,name,path from system.parts where table=&#39;test_replica&#39;;</p>`,23),p=[l];function c(d,r){return a(),n("div",null,p)}const u=s(i,[["render",c],["__file","clickhouse.html.vue"]]),m=JSON.parse(`{"path":"/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%BA%93/clickhouse.html","title":"clickhouse","lang":"zh-CN","frontmatter":{"icon":"edit","date":"2022-01-01T00:00:00.000Z","category":["数据库"],"tag":["clickhouse"],"description":"clickhouse clickhouse 常用命令 clickhouse表引擎 clickhouse性能优化 数据类型 建表时能用数值型或日期时间型表示的字段，就不要用字符串——全String类型在以Hive为中心的数仓建设中常见，但CK环境不应受此影响。 虽然clickhouse底层将DateTime存储为时间戳Long类型，但不建议直接存储Lon...","head":[["meta",{"property":"og:url","content":"https://blog.cizai.io/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%BA%93/clickhouse.html"}],["meta",{"property":"og:site_name","content":"此在笔记"}],["meta",{"property":"og:title","content":"clickhouse"}],["meta",{"property":"og:description","content":"clickhouse clickhouse 常用命令 clickhouse表引擎 clickhouse性能优化 数据类型 建表时能用数值型或日期时间型表示的字段，就不要用字符串——全String类型在以Hive为中心的数仓建设中常见，但CK环境不应受此影响。 虽然clickhouse底层将DateTime存储为时间戳Long类型，但不建议直接存储Lon..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-17T17:45:45.000Z"}],["meta",{"property":"article:author","content":"cizai"}],["meta",{"property":"article:tag","content":"clickhouse"}],["meta",{"property":"article:published_time","content":"2022-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-17T17:45:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"clickhouse\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-17T17:45:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"cizai\\",\\"url\\":\\"https://blog.cizai.io\\"}]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://blog.cizai.io/atom.xml","title":"此在笔记 Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://blog.cizai.io/feed.json","title":"此在笔记 JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://blog.cizai.io/rss.xml","title":"此在笔记 RSS Feed"}]]},"headers":[{"level":2,"title":"clickhouse 常用命令","slug":"clickhouse-常用命令","link":"#clickhouse-常用命令","children":[]},{"level":2,"title":"clickhouse表引擎","slug":"clickhouse表引擎","link":"#clickhouse表引擎","children":[]},{"level":2,"title":"clickhouse性能优化","slug":"clickhouse性能优化","link":"#clickhouse性能优化","children":[]},{"level":2,"title":"clickhouse 创建表等命令","slug":"clickhouse-创建表等命令","link":"#clickhouse-创建表等命令","children":[]}],"git":{"createdTime":1710697545000,"updatedTime":1710697545000,"contributors":[{"name":"sampan","email":"lijc210@163.com","commits":1}]},"readingTime":{"minutes":20.29,"words":6086},"filePathRelative":"大数据/数据库/clickhouse.md","localizedDate":"2022年1月1日","excerpt":"\\n<h2>clickhouse 常用命令</h2>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>更新数据</span></span>\\n<span class=\\"line\\"><span>ALTER table ads_sales_item_shop_di_replica ON CLUSTER ck_cluster1 update item_no='' where item_no is null;</span></span>\\n<span class=\\"line\\"><span>ALTER table ads_sales_item_shop_di_replica ON CLUSTER ck_cluster1 update store_shop_code='' where store_shop_code is null;</span></span>\\n<span class=\\"line\\"><span>ALTER table ads_sales_item_shop_di_replica ON CLUSTER ck_cluster1 update unify_goods_code='' where unify_goods_code is null;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>重命名表</span></span>\\n<span class=\\"line\\"><span>RENAME TABLE table_A TO table_A_bak, table_B TO table_B_bak;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>查看所有表</span></span>\\n<span class=\\"line\\"><span>select *</span></span>\\n<span class=\\"line\\"><span>FROM system.tables t WHERE database ='ads' AND engine &lt;&gt;'Distributed' ORDER by total_rows DESC </span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>select *</span></span>\\n<span class=\\"line\\"><span>FROM system.tables t WHERE database ='ads'</span></span>\\n<span class=\\"line\\"><span>AND engine &lt;&gt;'Distributed'</span></span>\\n<span class=\\"line\\"><span>and name not like '%del%'</span></span>\\n<span class=\\"line\\"><span>and name not like '%20%'</span></span>\\n<span class=\\"line\\"><span>ORDER by total_rows DESC</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>自动清理query_log，query_thread_log，trace_log</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>ALTER TABLE system.query_log on cluster ck_cluster1 MODIFY TTL event_date + INTERVAL 15 DAY</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>ALTER TABLE system.query_thread_log on cluster ck_cluster1 MODIFY TTL event_date + INTERVAL 15 DAY</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>ALTER TABLE system.trace_log on cluster ck_cluster1 MODIFY TTL event_date + INTERVAL 15 DAY</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>立即清理</span></span>\\n<span class=\\"line\\"><span>alter table system.query_thread_log_0 drop partition '202105'</span></span>\\n<span class=\\"line\\"><span>分区名可以用下语句查询</span></span>\\n<span class=\\"line\\"><span>select * from system.parts p where table = '表名'</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>查看parts  </span></span>\\n<span class=\\"line\\"><span>select * from system.parts  where table = 'abs_activity_item_info_day_replica'</span></span>\\n<span class=\\"line\\"><span>select * from system.parts where active = 0</span></span>\\n<span class=\\"line\\"><span>当前慢查询</span></span>\\n<span class=\\"line\\"><span>SELECT * FROM system.processes limit 100</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>耗时大于60秒</span></span>\\n<span class=\\"line\\"><span>kill query where elapsed &gt;= 60</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>clickhouse不能创建等执行操作时（每个节点都要执行）</span></span>\\n<span class=\\"line\\"><span>select * from system.mutations where is_done = 0;</span></span>\\n<span class=\\"line\\"><span>kill mutation ON CLUSTER ck_cluster1 </span></span>\\n<span class=\\"line\\"><span> where database='ads' and table='ads_jd_erp_sale_outstock_replica' </span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>进入zk清理任务</span></span>\\n<span class=\\"line\\"><span>deleteall /clickhouse/distributed_ddl/query-0000011932</span></span>\\n<span class=\\"line\\"><span>查询阻塞的任务</span></span>\\n<span class=\\"line\\"><span>select * from system.distributed_ddl_queue where status != 'Finished'</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>查看表大小</span></span>\\n<span class=\\"line\\"><span>SELECT</span></span>\\n<span class=\\"line\\"><span>    table AS \`表名\`,</span></span>\\n<span class=\\"line\\"><span>    sum(rows) AS \`总行数\`,</span></span>\\n<span class=\\"line\\"><span>    formatReadableSize(sum(data_uncompressed_bytes)) AS \`原始大小\`,</span></span>\\n<span class=\\"line\\"><span>    formatReadableSize(sum(data_compressed_bytes)) AS \`压缩大小\`,</span></span>\\n<span class=\\"line\\"><span>    round((sum(data_compressed_bytes) / sum(data_uncompressed_bytes)) * 100, 0) AS \`压缩率\`</span></span>\\n<span class=\\"line\\"><span>FROM system.parts</span></span>\\n<span class=\\"line\\"><span>GROUP BY table</span></span>\\n<span class=\\"line\\"><span>order by sum(data_compressed_bytes) desc</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>修改字段名</span></span>\\n<span class=\\"line\\"><span>ALTER TABLE visits RENAME COLUMN webBrowser TO browser</span></span>\\n<span class=\\"line\\"><span>分布式集群下用分布式DDL修改字段名</span></span>\\n<span class=\\"line\\"><span>ALTER TABLE visits on cluster shipin_cluster RENAME COLUMN webBrowser TO browser</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>新增字段</span></span>\\n<span class=\\"line\\"><span> alter table ads_itemprice_sales_section_replica ON CLUSTER ck_cluster1 add column sort_mark Nullable(int)</span></span>\\n<span class=\\"line\\"><span> alter table ads_itemprice_sales_section ON CLUSTER ck_cluster1 add column sort_mark Nullable(int)</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{u as comp,m as data};
