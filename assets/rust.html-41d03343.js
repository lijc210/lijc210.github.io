import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as d,c as o,a as r,b as e,d as t,e as s}from"./app-eddbb7b0.js";const h={},c=r("h1",{id:"rust",tabindex:"-1"},[r("a",{class:"header-anchor",href:"#rust","aria-hidden":"true"},"#"),e(" rust")],-1),l=r("h2",{id:"rust-教程",tabindex:"-1"},[r("a",{class:"header-anchor",href:"#rust-教程","aria-hidden":"true"},"#"),e(" rust 教程")],-1),u={href:"https://course.rs/",target:"_blank",rel:"noopener noreferrer"},p={href:"https://www.runoob.com/rust/rust-tutorial.html",target:"_blank",rel:"noopener noreferrer"},g=s(`<h2 id="rustlings-练习" tabindex="-1"><a class="header-anchor" href="#rustlings-练习" aria-hidden="true">#</a> rustlings 练习</h2><p>MacOS/Linux</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>curl -L https://raw.githubusercontent.com/rust-lang/rustlings/main/install.sh | bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行成功之后，当前目录会有rustlings，使用 vscode 打开此文件<br> 在此目录终端运行rustlings watch，根据提示修改代码，保存会自动验证，成功后根据提示练习下一题<br> 在rustlings watch下输入 hint 可以获得提示。</p><h2 id="rust-安装" tabindex="-1"><a class="header-anchor" href="#rust-安装" aria-hidden="true">#</a> rust 安装</h2>`,5),b=r("br",null,null,-1),m={href:"https://sh.rustup.rs",target:"_blank",rel:"noopener noreferrer"},v=r("h2",{id:"在windows-安装",tabindex:"-1"},[r("a",{class:"header-anchor",href:"#在windows-安装","aria-hidden":"true"},"#"),e(" 在windows 安装")],-1),_={href:"https://course.rs/first-try/installation.html#%E5%9C%A8-windows-%E4%B8%8A%E5%AE%89%E8%A3%85-rustup",target:"_blank",rel:"noopener noreferrer"},f=s(`<h2 id="rust更换源-cargo-config-toml" tabindex="-1"><a class="header-anchor" href="#rust更换源-cargo-config-toml" aria-hidden="true">#</a> rust更换源 ~.cargo/config.toml</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[http]
check-revoke = false

# 注释使用默认
[source.crates-io]
replace-with = &#39;rsproxy&#39;

[source.ustc]
registry = &quot;git://mirrors.ustc.edu.cn/crates.io-index&quot;

# 字节跳动
[source.rsproxy]
registry = &quot;https://rsproxy.cn/crates.io-index&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="创建项目" tabindex="-1"><a class="header-anchor" href="#创建项目" aria-hidden="true">#</a> 创建项目</h2><p>cargo new rust_test</p><h2 id="升级rust" tabindex="-1"><a class="header-anchor" href="#升级rust" aria-hidden="true">#</a> 升级rust</h2><p>rustup update</p><h2 id="升级cargo" tabindex="-1"><a class="header-anchor" href="#升级cargo" aria-hidden="true">#</a> 升级cargo</h2><p>cargo install cargo</p><h2 id="升级所有依赖" tabindex="-1"><a class="header-anchor" href="#升级所有依赖" aria-hidden="true">#</a> 升级所有依赖</h2><p>cargo update</p><h2 id="升级指定依赖" tabindex="-1"><a class="header-anchor" href="#升级指定依赖" aria-hidden="true">#</a> 升级指定依赖</h2><p>cargo update -p axum</p><h2 id="搜索包" tabindex="-1"><a class="header-anchor" href="#搜索包" aria-hidden="true">#</a> 搜索包</h2><p>cargo search log --registry crates-io</p><h2 id="添加包" tabindex="-1"><a class="header-anchor" href="#添加包" aria-hidden="true">#</a> 添加包</h2><p>cargo add log</p><h2 id="更新所有已安装的cargo插件和二进制文件-非项目" tabindex="-1"><a class="header-anchor" href="#更新所有已安装的cargo插件和二进制文件-非项目" aria-hidden="true">#</a> 更新所有已安装的Cargo插件和二进制文件(非项目)</h2><p>cargo install cargo-update<br> cargo install-update -a<br> cargo install-update cargo</p><p>cargo run<br> cargo doc</p><h2 id="单元测试" tabindex="-1"><a class="header-anchor" href="#单元测试" aria-hidden="true">#</a> 单元测试</h2><p>cargo test -- --test-threads=1<br> cargo test -- --show-output<br> cargo test one_hundred<br> cargo test --no-run</p><h2 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码" aria-hidden="true">#</a> 示例代码</h2><p>cargo run --example eg1_variable</p><h2 id="基准测试-只能在非-stable-下使用" tabindex="-1"><a class="header-anchor" href="#基准测试-只能在非-stable-下使用" aria-hidden="true">#</a> 基准测试（只能在非 stable 下使用）</h2><p>安装 nightly 版本：<br> rustup install nightly<br> 使用以下命令确认版本已经安装成功<br> rustup toolchain list<br> rustup override set nightly<br> 切换回 stable 版本<br> rustup override set stable<br> cargo bench</p><h2 id="cargo-git" tabindex="-1"><a class="header-anchor" href="#cargo-git" aria-hidden="true">#</a> cargo git</h2>`,26),x={href:"https://github.com/mitsuhiko/rye",target:"_blank",rel:"noopener noreferrer"};function w(y,k){const a=i("ExternalLinkIcon");return d(),o("div",null,[c,l,r("ul",null,[r("li",null,[r("a",u,[e("rust 圣言"),t(a)])]),r("li",null,[r("a",p,[e("rust 菜鸟教程"),t(a)])])]),g,r("p",null,[e("在 Linux 或 macOS"),b,e(" $ curl --proto '=https' --tlsv1.2 "),r("a",m,[e("https://sh.rustup.rs"),t(a)]),e(" -sSf | sh")]),v,r("p",null,[r("a",_,[e("https://course.rs/first-try/installation.html#在-windows-上安装-rustup"),t(a)])]),f,r("p",null,[e("cargo install --git "),r("a",x,[e("https://github.com/mitsuhiko/rye"),t(a)]),e(" rye")])])}const q=n(h,[["render",w],["__file","rust.html.vue"]]);export{q as default};
